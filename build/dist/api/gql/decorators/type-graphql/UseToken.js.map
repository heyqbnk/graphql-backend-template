{"version":3,"sources":["dist/api/gql/decorators/type-graphql/UseToken.ts"],"names":[],"mappings":";;;AAAA,+CAAkD;AAGlD,6CAAmD;AAQnD;;;;GAIG;AACH,SAAgB,QAAQ;IACtB,OAAO,mCAAoB,CAAc,CAAC,EAAC,OAAO,EAAC,EAAE,EAAE;QACrD,IAAI,CAAC,CAAC,MAAM,IAAI,OAAO,CAAC,EAAE;YACxB,MAAM,IAAI,0BAAiB,EAAE,CAAC;SAC/B;QACD,MAAM,EAAC,EAAE,EAAE,MAAM,EAAC,GAAG,OAAO,CAAC,IAAI,CAAC;QAElC,OAAO;YACL,MAAM,EAAE,EAAE;YACV,MAAM;YACN,KAAK,EAAE,OAAO,CAAC,KAAK;SACrB,CAAA;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAbD,4BAaC","file":"UseToken.js","sourcesContent":["import {createParamDecorator} from 'type-graphql';\r\nimport {TAnyContext} from '../../types';\r\nimport {EAccessScope} from '~/shared/types';\r\nimport {UserNotFoundError} from '~/api/gql/errors';\r\n\r\ninterface IToken {\r\n  token: string;\r\n  userId: number;\r\n  scopes: EAccessScope[];\r\n}\r\n\r\n/**\r\n * Returns JWT information.\r\n * @returns {ParameterDecorator}\r\n * @constructor\r\n */\r\nexport function UseToken() {\r\n  return createParamDecorator<TAnyContext>(({context}) => {\r\n    if (!('user' in context)) {\r\n      throw new UserNotFoundError();\r\n    }\r\n    const {id, scopes} = context.user;\r\n\r\n    return {\r\n      userId: id,\r\n      scopes,\r\n      token: context.token,\r\n    }\r\n  });\r\n}\r\n\r\nexport {IToken as Token};\r\n"],"sourceRoot":"/"}