{"version":3,"sources":["dist/shared/controllers/PostsController.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,mCAAuC;AAEvC,0EAAqE;AASrE,IAAa,eAAe,GAA5B,MAAa,eAAe;IAA5B;QAIU,UAAK,GAAY,CAAC;gBACxB,EAAE,EAAE,CAAC;gBACL,MAAM,EAAE,CAAC;gBACT,KAAK,EAAE,kBAAkB;gBACzB,OAAO,EAAE,4BAA4B;gBACrC,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC,CAAC;IA2DL,CAAC;IAzDC;;;OAGG;IACH,YAAY,CAAC,MAAc;QACzB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,MAAM,IAAI,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5E,CAAC;IAED;;;OAGG;IACH,OAAO,CAAC,EAAU;QAChB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC;IACnD,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,IAAiB;QACtB,MAAM,EAAC,OAAO,EAAE,KAAK,EAAE,MAAM,EAAC,GAAG,IAAI,CAAC;QAEtC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;YAC9C,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;SACvC;QACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YACd,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;YACrB,MAAM;YACN,KAAK;YACL,OAAO;YACP,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,EAAU,EAAE,MAAc;QAC/B,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;YAC7B,IAAI,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE;gBAClB,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE;oBAC1B,OAAO,KAAK,CAAC;iBACd;gBACD,IAAI,WAAW,IAAI,IAAI,EAAE;oBACvB,OAAO,KAAK,CAAC;iBACd;gBACD,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;gBAC5B,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAA;AAnEC;IADC,eAAM,CAAC,GAAG,EAAE,CAAC,iCAAe,CAAC;8BACb,iCAAe;wDAAC;AAFtB,eAAe;IAD3B,gBAAO,EAAE;GACG,eAAe,CAqE3B;AArEY,0CAAe","file":"PostsController.js","sourcesContent":["import {Inject, Service} from 'typedi';\r\nimport {IPost} from '~/shared/types';\r\nimport {UsersController} from '~/shared/controllers/UsersController';\r\n\r\ninterface ICreateData {\r\n  userId: number;\r\n  title: string;\r\n  content: string;\r\n}\r\n\r\n@Service()\r\nexport class PostsController {\r\n  @Inject(() => UsersController)\r\n  usersController: UsersController;\r\n\r\n  private posts: IPost[] = [{\r\n    id: 0,\r\n    userId: 0,\r\n    title: 'First admin post',\r\n    content: 'Lorem ipsum dolor sit amet',\r\n    createdAt: new Date(),\r\n  }];\r\n\r\n  /**\r\n   * Returns user posts.\r\n   * @param userId\r\n   */\r\n  getUserPosts(userId: number): IPost[] {\r\n    return this.posts.filter(p => p.userId === userId && !('deletedAt' in p));\r\n  }\r\n\r\n  /**\r\n   * Returns post by id.\r\n   * @param id\r\n   */\r\n  getById(id: number): IPost | null {\r\n    return this.posts.find(p => p.id === id) || null;\r\n  }\r\n\r\n  /**\r\n   * Creates new post.\r\n   * @param data\r\n   */\r\n  create(data: ICreateData): IPost {\r\n    const {content, title, userId} = data;\r\n\r\n    if (!this.usersController.isRegistered(userId)) {\r\n      throw new Error('User was not found');\r\n    }\r\n    this.posts.push({\r\n      id: this.posts.length,\r\n      userId,\r\n      title,\r\n      content,\r\n      createdAt: new Date(),\r\n    });\r\n\r\n    return this.posts[this.posts.length - 1];\r\n  }\r\n\r\n  /**\r\n   * Deletes post with soft deletion.\r\n   * @param id\r\n   * @param userId\r\n   */\r\n  delete(id: number, userId: number): boolean {\r\n    for (const post of this.posts) {\r\n      if (post.id === id) {\r\n        if (post.userId !== userId) {\r\n          return false;\r\n        }\r\n        if ('deletedAt' in post) {\r\n          return false;\r\n        }\r\n        post.deletedAt = new Date();\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}"],"sourceRoot":"/"}