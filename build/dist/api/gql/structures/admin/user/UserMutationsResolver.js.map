{"version":3,"sources":["dist/api/gql/structures/admin/user/UserMutationsResolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,+CAA4E;AAC5E,qDAA0C;AAC1C,0CAAyC;AACzC,qDAA8E;AAC9E,sDAAqD;AACrD,mCAA8B;AAC9B,6CAAmE;AAGnE,IAAM,eAAe,GAArB,MAAM,eAAe;CAMpB,CAAA;AAJC;IADC,oBAAK,CAAC,GAAG,EAAE,CAAC,kBAAG,EAAE,EAAC,WAAW,EAAE,iBAAiB,EAAC,CAAC;;+CACpC;AAGf;IADC,oBAAK,CAAC,GAAG,EAAE,CAAC,iBAAS,EAAE,EAAC,WAAW,EAAE,eAAe,EAAC,CAAC;;6CACvC;AALZ,eAAe;IADpB,uBAAQ,EAAE;GACL,eAAe,CAMpB;AAGD,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;IAQhC,WAAW,CACS,IAAiB,EACN,IAAqB;QAElD,MAAM,EAAC,IAAI,EAAE,MAAM,EAAC,GAAG,IAAI,CAAC;QAE5B,2DAA2D;QAC3D,IACE,IAAI,CAAC,IAAI,KAAK,iBAAS,CAAC,SAAS;YACjC,CAAC,iBAAS,CAAC,KAAK,EAAE,iBAAS,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EACrD;YACA,MAAM,IAAI,uBAAc,EAAE,CAAC;SAC5B;QACD,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAE9D,IAAI,WAAW,KAAK,IAAI,EAAE;YACxB,MAAM,IAAI,0BAAiB,EAAE,CAAC;SAC/B;QACD,OAAO,IAAI,iBAAI,CAAC,WAAW,CAAC,CAAC;IAC/B,CAAC;CACF,CAAA;AA1BC;IADC,eAAM,CAAC,GAAG,EAAE,CAAC,6BAAe,CAAC;8BAClB,6BAAe;yDAAC;AAM5B;IAJC,wBAAW,CAAC,EAAC,KAAK,EAAE,CAAC,iBAAS,CAAC,SAAS,EAAE,iBAAS,CAAC,KAAK,CAAC,EAAC,CAAC;IAC5D,uBAAQ,CAAC,GAAG,EAAE,CAAC,iBAAI,EAAE;QACpB,WAAW,EAAE,mBAAmB;KACjC,CAAC;IAEC,WAAA,2BAAc,EAAE,CAAA;IAChB,WAAA,mBAAI,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,CAAA;;6CAAO,eAAe;oCACjD,iBAAI;wDAgBN;AA3BU,qBAAqB;IADjC,uBAAQ,EAAE;GACE,qBAAqB,CA4BjC;AA5BY,sDAAqB","file":"UserMutationsResolver.js","sourcesContent":["import {Args, ArgsType, Field, Int, Mutation, Resolver} from 'type-graphql';\r\nimport {User} from '~/api/gql/structures';\r\nimport {EUserRole} from '~/shared/types';\r\nimport {CurrentUser, RequireRole, UseCurrentUser} from '~/api/gql/decorators';\r\nimport {UsersController} from '~/shared/controllers';\r\nimport {Inject} from 'typedi';\r\nimport {ForbiddenError, UserNotFoundError} from '~/api/gql/errors';\r\n\r\n@ArgsType()\r\nclass SetUserRoleArgs {\r\n  @Field(() => Int, {description: 'User identifier'})\r\n  userId: number;\r\n\r\n  @Field(() => EUserRole, {description: 'Assigned role'})\r\n  role: EUserRole;\r\n}\r\n\r\n@Resolver()\r\nexport class UserMutationsResolver {\r\n  @Inject(() => UsersController)\r\n  controller: UsersController;\r\n\r\n  @RequireRole({oneOf: [EUserRole.Moderator, EUserRole.Admin]})\r\n  @Mutation(() => User, {\r\n    description: 'Changes user role',\r\n  })\r\n  setUserRole(\r\n    @UseCurrentUser() user: CurrentUser,\r\n    @Args(() => SetUserRoleArgs) args: SetUserRoleArgs,\r\n  ): User {\r\n    const {role, userId} = args;\r\n\r\n    // Moderator cannot set admin or moderator role to someone.\r\n    if (\r\n      user.role === EUserRole.Moderator &&\r\n      [EUserRole.Admin, EUserRole.Moderator].includes(role)\r\n    ) {\r\n      throw new ForbiddenError();\r\n    }\r\n    const updatedUser = this.controller.setUserRole(userId, role);\r\n\r\n    if (updatedUser === null) {\r\n      throw new UserNotFoundError();\r\n    }\r\n    return new User(updatedUser);\r\n  }\r\n}"],"sourceRoot":"/"}