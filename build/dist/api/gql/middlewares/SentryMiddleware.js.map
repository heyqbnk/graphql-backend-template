{"version":3,"sources":["dist/api/gql/middlewares/SentryMiddleware.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA,qDAAuC;AAEvC;;;GAGG;AACU,QAAA,gBAAgB,GAC3B,KAAK,EAAE,EAAC,OAAO,EAAC,EAAE,IAAI,EAAE,EAAE;IACxB,IAAI;QACF,OAAO,MAAM,IAAI,EAAE,CAAC;KACrB;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,CAAC,gBAAgB,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE;YACjC,IAAI,MAAM,IAAI,OAAO,EAAE;gBACrB,gEAAgE;gBAChE,KAAK,CAAC,OAAO,CAAC,EAAC,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAC,CAAC,CAAC;aACjD;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;QACH,+DAA+D;QAC/D,iBAAiB;QACjB,MAAM,CAAC,CAAC;KACT;AACH,CAAC,CAAC","file":"SentryMiddleware.js","sourcesContent":["import {MiddlewareFn} from 'type-graphql';\r\nimport {TAnyContext} from '~/api/gql/types';\r\nimport * as Sentry from '@sentry/node';\r\n\r\n/**\r\n * Middleware that catches error and sends it to Sentry.\r\n * @returns {MiddlewareFn<TAnyContext>}\r\n */\r\nexport const SentryMiddleware: MiddlewareFn<TAnyContext> =\r\n  async ({context}, next) => {\r\n    try {\r\n      return await next();\r\n    } catch (e) {\r\n      Sentry.captureException(e, scope => {\r\n        if ('user' in context) {\r\n          // Set error user, so we could know which user had this problem.\r\n          scope.setUser({id: context.user.id.toString()});\r\n        }\r\n        return scope;\r\n      });\r\n      // Rethrow an error, so Apollo Server could catch it and return\r\n      // appropriately.\r\n      throw e;\r\n    }\r\n  };"],"sourceRoot":"/"}