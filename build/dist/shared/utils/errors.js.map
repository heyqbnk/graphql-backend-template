{"version":3,"sources":["dist/shared/utils/errors.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,qDAAuC;AACvC,uCAAsC;AAEtC;;;;GAIG;AACH,SAAgB,aAAa,CAAC,QAAQ,GAAG,eAAQ,CAAC,KAAK;IACrD,OAAO,CAAC,CAAQ,EAAE,EAAE;QAClB,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjB,MAAM,CAAC,gBAAgB,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC;AACJ,CAAC;AALD,sCAKC;AAED;;;GAGG;AACU,QAAA,iBAAiB,GAAG,aAAa,CAAC,eAAQ,CAAC,KAAK,CAAC,CAAC;AAE/D;;;GAGG;AACU,QAAA,eAAe,GAAG,aAAa,CAAC,eAAQ,CAAC,OAAO,CAAC,CAAC","file":"errors.js","sourcesContent":["import * as Sentry from '@sentry/node';\r\nimport {Severity} from '@sentry/node';\r\n\r\n/**\r\n * Creates function which cathes error with Sentry and logs it into console.\r\n * @param {Severity} severity\r\n * @returns {(e: Error) => void}\r\n */\r\nexport function createCatcher(severity = Severity.Error) {\r\n  return (e: Error) => {\r\n    console.error(e);\r\n    Sentry.captureException(e, scope => scope.setLevel(severity));\r\n  };\r\n}\r\n\r\n/**\r\n * Critical errors catcher.\r\n * @type {(e: Error) => void}\r\n */\r\nexport const fatalErrorCatcher = createCatcher(Severity.Fatal);\r\n\r\n/**\r\n * Warnings catcher.\r\n * @type {(e: Error) => void}\r\n */\r\nexport const warningsCatcher = createCatcher(Severity.Warning);"],"sourceRoot":"/"}