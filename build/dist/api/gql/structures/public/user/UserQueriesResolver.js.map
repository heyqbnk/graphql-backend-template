{"version":3,"sources":["dist/api/gql/structures/public/user/UserQueriesResolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,+CAAoE;AACpE,qDAA0C;AAC1C,mCAA8B;AAC9B,sDAAuE;AACvE,6CAAmD;AACnD,qDAA+E;AAC/E,0CAA4C;AAG5C,IAAM,SAAS,GAAf,MAAM,SAAS;CAMd,CAAA;AAJC;IADC,oBAAK,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,EAAC,WAAW,EAAE,OAAO,EAAC,CAAC;;wCAC9B;AAGd;IADC,oBAAK,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,EAAC,WAAW,EAAE,UAAU,EAAC,CAAC;;2CAC9B;AALb,SAAS;IADd,uBAAQ,EAAE;GACL,SAAS,CAMd;AAGD,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAW9B,IAAI,CAAmB,IAAiB;QACtC,OAAO,IAAI,iBAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAMD,KAAK,CACoB,IAAe;QAEtC,MAAM,EAAC,KAAK,EAAE,QAAQ,EAAC,GAAG,IAAI,CAAC;QAC/B,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAEpE,IAAI,IAAI,KAAK,IAAI,EAAE;YACjB,MAAM,IAAI,0BAAiB,EAAE,CAAC;SAC/B;QACD,OAAO,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC/D,CAAC;CACF,CAAA;AA5BC;IADC,eAAM,CAAC,GAAG,EAAE,CAAC,6BAAe,CAAC;8BAClB,6BAAe;uDAAC;AAG5B;IADC,eAAM,CAAC,GAAG,EAAE,CAAC,8BAAgB,CAAC;8BACb,8BAAgB;6DAAC;AAMnC;IAJC,yBAAY,CAAC,oBAAY,CAAC,YAAY,CAAC;IACvC,oBAAK,CAAC,GAAG,EAAE,CAAC,iBAAI,EAAE;QACjB,WAAW,EAAE,wCAAwC;KACtD,CAAC;IACI,WAAA,2BAAc,EAAE,CAAA;;;oCAAqB,iBAAI;+CAE9C;AAMD;IAJC,oBAAK,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE;QACnB,WAAW,EAAE,oDAAoD;YAC/D,eAAe;KAClB,CAAC;IAEC,WAAA,mBAAI,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAA;;qCAAO,SAAS;;gDASvC;AA7BU,mBAAmB;IAD/B,uBAAQ,EAAE;GACE,mBAAmB,CA8B/B;AA9BY,kDAAmB","file":"UserQueriesResolver.js","sourcesContent":["import {Args, ArgsType, Field, Query, Resolver} from 'type-graphql';\r\nimport {User} from '~/api/gql/structures';\r\nimport {Inject} from 'typedi';\r\nimport {AccessController, UsersController} from '~/shared/controllers';\r\nimport {UserNotFoundError} from '~/api/gql/errors';\r\nimport {CurrentUser, RequireScope, UseCurrentUser} from '~/api/gql/decorators';\r\nimport {EAccessScope} from '~/shared/types';\r\n\r\n@ArgsType()\r\nclass LoginArgs {\r\n  @Field(() => String, {description: 'Login'})\r\n  login: string;\r\n\r\n  @Field(() => String, {description: 'Password'})\r\n  password: string;\r\n}\r\n\r\n@Resolver()\r\nexport class UserQueriesResolver {\r\n  @Inject(() => UsersController)\r\n  controller: UsersController;\r\n\r\n  @Inject(() => AccessController)\r\n  accessController: AccessController;\r\n\r\n  @RequireScope(EAccessScope.ReadUserInfo)\r\n  @Query(() => User, {\r\n    description: 'Returns information about current user',\r\n  })\r\n  user(@UseCurrentUser() user: CurrentUser): User {\r\n    return new User(user);\r\n  }\r\n\r\n  @Query(() => String, {\r\n    description: 'Authenticates user and returns token with default ' +\r\n      'access scopes'\r\n  })\r\n  login(\r\n    @Args(() => LoginArgs) args: LoginArgs,\r\n  ): string {\r\n    const {login, password} = args;\r\n    const user = this.controller.getByLoginAndPassword(login, password);\r\n\r\n    if (user === null) {\r\n      throw new UserNotFoundError();\r\n    }\r\n    return this.accessController.createDefaultUserToken(user.id);\r\n  }\r\n}\r\n"],"sourceRoot":"/"}