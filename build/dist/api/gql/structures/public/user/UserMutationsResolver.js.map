{"version":3,"sources":["dist/api/gql/structures/public/user/UserMutationsResolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,+CAQsB;AACtB,qDAA0C;AAC1C,qDAAqE;AACrE,mCAA8B;AAC9B,sDAAuE;AACvE,6CAA8D;AAG9D,IAAM,YAAY,GAAlB,MAAM,YAAY;CAqBjB,CAAA;AAjBC;IAHC,2BAAS,CAAC,CAAC,CAAC;IACZ,2BAAS,CAAC,EAAE,CAAC;IACb,oBAAK,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,EAAC,WAAW,EAAE,YAAY,EAAC,CAAC;;+CAC/B;AAKlB;IAHC,2BAAS,CAAC,CAAC,CAAC;IACZ,2BAAS,CAAC,EAAE,CAAC;IACb,oBAAK,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,EAAC,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC;;8CACvC;AAMzB;IAJC,gCAAc,EAAE;IAChB,2BAAS,CAAC,CAAC,CAAC;IACZ,2BAAS,CAAC,EAAE,CAAC;IACb,oBAAK,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,EAAC,WAAW,EAAE,OAAO,EAAC,CAAC;;2CAC9B;AAKd;IAHC,2BAAS,CAAC,CAAC,CAAC;IACZ,2BAAS,CAAC,GAAG,CAAC;IACd,oBAAK,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,EAAC,WAAW,EAAE,UAAU,EAAC,CAAC;;8CAC9B;AApBb,YAAY;IADjB,uBAAQ,EAAE;GACL,YAAY,CAqBjB;AAGD,IAAM,cAAc,GAApB,MAAM,cAAc;IAClB,YAAY,IAAU,EAAE,KAAa;QACnC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;CAOF,CAAA;AAJC;IADC,oBAAK,CAAC,GAAG,EAAE,CAAC,iBAAI,EAAE,EAAC,WAAW,EAAE,kBAAkB,EAAC,CAAC;8BAC/C,iBAAI;4CAAC;AAGX;IADC,oBAAK,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,EAAC,WAAW,EAAE,cAAc,EAAC,CAAC;;6CACrC;AAVV,cAAc;IADnB,yBAAU,EAAE;qCAEO,iBAAI;GADlB,cAAc,CAWnB;AAGD,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;IAQhC,QAAQ,CACoB,GAAiB;QAE3C,MAAM,EAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAC,GAAG,GAAG,CAAC;QAEnD,IAAI;YACF,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;gBACpC,SAAS;gBACT,QAAQ,EAAE,QAAQ,IAAI,SAAS;gBAC/B,KAAK;gBACL,QAAQ;aACT,CAAC,CAAC;YACH,MAAM,KAAK,GAAG,IAAI;iBACf,gBAAgB;iBAChB,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAEnC,OAAO,IAAI,cAAc,CAAC,IAAI,iBAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;SAClD;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,qCAA4B,EAAE,CAAC;SAC1C;IACH,CAAC;CACF,CAAA;AA3BC;IADC,eAAM,CAAC,GAAG,EAAE,CAAC,6BAAe,CAAC;8BAClB,6BAAe;yDAAC;AAG5B;IADC,eAAM,CAAC,GAAG,EAAE,CAAC,8BAAgB,CAAC;8BACb,8BAAgB;+DAAC;AAGnC;IADC,uBAAQ,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC;IAE5B,WAAA,mBAAI,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,CAAA;;qCAAM,YAAY;oCAC1C,cAAc;qDAkBhB;AA5BU,qBAAqB;IADjC,uBAAQ,EAAE;GACE,qBAAqB,CA6BjC;AA7BY,sDAAqB","file":"UserMutationsResolver.js","sourcesContent":["import {\r\n  Args,\r\n  ArgsType,\r\n  Field,\r\n  Maybe,\r\n  Mutation,\r\n  ObjectType,\r\n  Resolver\r\n} from 'type-graphql';\r\nimport {User} from '~/api/gql/structures';\r\nimport {IsAlphanumeric, MaxLength, MinLength} from 'class-validator';\r\nimport {Inject} from 'typedi';\r\nimport {AccessController, UsersController} from '~/shared/controllers';\r\nimport {UserIsAlreadyRegisteredError} from '~/api/gql/errors';\r\n\r\n@ArgsType()\r\nclass RegisterArgs {\r\n  @MinLength(1)\r\n  @MaxLength(30)\r\n  @Field(() => String, {description: 'First name'})\r\n  firstName: string;\r\n\r\n  @MinLength(1)\r\n  @MaxLength(30)\r\n  @Field(() => String, {description: 'Last name', nullable: true})\r\n  lastName?: Maybe<string>;\r\n\r\n  @IsAlphanumeric()\r\n  @MinLength(3)\r\n  @MaxLength(32)\r\n  @Field(() => String, {description: 'Login'})\r\n  login: string;\r\n\r\n  @MinLength(3)\r\n  @MaxLength(100)\r\n  @Field(() => String, {description: 'Password'})\r\n  password: string;\r\n}\r\n\r\n@ObjectType()\r\nclass RegisterResult {\r\n  constructor(user: User, token: string) {\r\n    this.user = user;\r\n    this.token = token;\r\n  }\r\n\r\n  @Field(() => User, {description: 'User information'})\r\n  user: User;\r\n\r\n  @Field(() => String, {description: 'Access token'})\r\n  token: string;\r\n}\r\n\r\n@Resolver()\r\nexport class UserMutationsResolver {\r\n  @Inject(() => UsersController)\r\n  controller: UsersController;\r\n\r\n  @Inject(() => AccessController)\r\n  accessController: AccessController;\r\n\r\n  @Mutation(() => RegisterResult)\r\n  register(\r\n    @Args(() => RegisterArgs) arg: RegisterArgs\r\n  ): RegisterResult {\r\n    const {firstName, lastName, login, password} = arg;\r\n\r\n    try {\r\n      const user = this.controller.register({\r\n        firstName,\r\n        lastName: lastName || undefined,\r\n        login,\r\n        password,\r\n      });\r\n      const token = this\r\n        .accessController\r\n        .createDefaultUserToken(user.id);\r\n\r\n      return new RegisterResult(new User(user), token);\r\n    } catch (e) {\r\n      throw new UserIsAlreadyRegisteredError();\r\n    }\r\n  }\r\n}"],"sourceRoot":"/"}