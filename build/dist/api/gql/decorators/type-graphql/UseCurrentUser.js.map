{"version":3,"sources":["dist/api/gql/decorators/type-graphql/UseCurrentUser.ts"],"names":[],"mappings":";;;AAAA,+CAAkD;AAElD,6CAAmD;AACnD,mCAAiC;AACjC,sDAAqD;AAGrD;;;;GAIG;AACH,SAAgB,cAAc;IAC5B,OAAO,mCAAoB,CAAqB,KAAK,EAAE,EAAC,OAAO,EAAC,EAAE,EAAE;QAClE,IAAI,CAAC,CAAC,MAAM,IAAI,OAAO,CAAC,EAAE;YACxB,MAAM,IAAI,0BAAiB,EAAE,CAAC;SAC/B;QACD,MAAM,eAAe,GAAG,kBAAS,CAAC,GAAG,CAAC,6BAAe,CAAC,CAAC;QACvD,MAAM,IAAI,GAAG,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEtD,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,0BAAiB,EAAE,CAAC;SAC/B;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;AACL,CAAC;AAbD,wCAaC","file":"UseCurrentUser.js","sourcesContent":["import {createParamDecorator} from 'type-graphql';\r\nimport {IAuthorizedContext} from '../../types';\r\nimport {UserNotFoundError} from '~/api/gql/errors';\r\nimport {Container} from 'typedi';\r\nimport {UsersController} from '~/shared/controllers';\r\nimport {IUser} from '~/shared/types';\r\n\r\n/**\r\n * Возвращает текущего пользователя в случае, если он зарегистрирован.\r\n * @returns {ParameterDecorator}\r\n * @constructor\r\n */\r\nexport function UseCurrentUser() {\r\n  return createParamDecorator<IAuthorizedContext>(async ({context}) => {\r\n    if (!('user' in context)) {\r\n      throw new UserNotFoundError();\r\n    }\r\n    const usersController = Container.get(UsersController);\r\n    const user = usersController.getById(context.user.id);\r\n\r\n    if (!user) {\r\n      throw new UserNotFoundError();\r\n    }\r\n    return user;\r\n  });\r\n}\r\n\r\nexport {IUser as CurrentUser};\r\n"],"sourceRoot":"/"}