{"version":3,"sources":["dist/api/gql/decorators/type-graphql/Subscription.ts"],"names":[],"mappings":";;;AAYA,+CAA4D;AAgB5D;;;;;;GAMG;AACU,QAAA,YAAY,GAAG,CAC1B,cAA8B,EAC9B,OAAoB,EACH,EAAE;IACnB,OAAO,2BAAc,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;AACjD,CAAC,CAAC","file":"Subscription.js","sourcesContent":["import {\r\n  EPubSubEvent,\r\n  IAuthorizedContext,\r\n  TGetPubSubEventPayload,\r\n} from '~/api/gql/types';\r\nimport {ResolverFilterData} from 'type-graphql/dist/interfaces';\r\nimport {\r\n  AdvancedOptions,\r\n  ReturnTypeFunc,\r\n} from 'type-graphql/dist/decorators/types';\r\nimport {MergeExclusive} from 'type-graphql/dist/utils/types';\r\nimport {ResolverFn} from 'graphql-subscriptions';\r\nimport {Subscription as TGSubscription} from 'type-graphql';\r\n\r\n/**\r\n * These types were taken from type-graphql.\r\n */\r\ntype TSubscriptionFilterFunc<E extends EPubSubEvent, Args = any> = (\r\n  resolverFilterData: ResolverFilterData<TGetPubSubEventPayload<E>, Args, IAuthorizedContext>,\r\n) => boolean | Promise<boolean>;\r\n\r\ntype TOptions<E extends EPubSubEvent, Args = any> =\r\n  AdvancedOptions\r\n  & MergeExclusive<{\r\n  topics: E | E[];\r\n  filter?: TSubscriptionFilterFunc<E, Args>;\r\n}, { subscribe: ResolverFn; }>;\r\n\r\n/**\r\n * Typed decorator Subscription from type-graphql.\r\n * @param {ReturnTypeFunc} returnTypeFunc\r\n * @param {TOptions<E>} options\r\n * @returns {MethodDecorator}\r\n * @constructor\r\n */\r\nexport const Subscription = <E extends EPubSubEvent>(\r\n  returnTypeFunc: ReturnTypeFunc,\r\n  options: TOptions<E>,\r\n): MethodDecorator => {\r\n  return TGSubscription(returnTypeFunc, options);\r\n};"],"sourceRoot":"/"}