{"version":3,"sources":["dist/shared/controllers/UsersController.ts"],"names":[],"mappings":";;;;;;;;;AAAA,0CAAgD;AAChD,mCAA+B;AAU/B,IAAa,eAAe,GAA5B,MAAa,eAAe;IAA5B;QACU,UAAK,GAAY,CAAC;gBACxB,EAAE,EAAE,CAAC;gBACL,SAAS,EAAE,OAAO;gBAClB,KAAK,EAAE,OAAO;gBACd,QAAQ,EAAE,OAAO;gBACjB,IAAI,EAAE,iBAAS,CAAC,KAAK;aACtB,CAAC,CAAC;IA4EL,CAAC;IA1EC;;;OAGG;IACH,QAAQ,CAAC,OAAyB;QAChC,MAAM,EAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAC,GAAG,OAAO,CAAC;QACvD,MAAM,YAAY,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QACzC,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;YACvC,OAAO,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,YAAY,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,IAAI,YAAY,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SAC/C;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YACd,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;YACrB,SAAS;YACT,QAAQ;YACR,KAAK;YACL,QAAQ;YACR,IAAI,EAAE,iBAAS,CAAC,MAAM;SACvB,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACH,qBAAqB,CAAC,KAAa,EAAE,QAAgB;QACnD,OAAO,IAAI;aACR,KAAK;aACL,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,KAAK,IAAI,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,IAAI,IAAI,CAAC;IACrE,CAAC;IAED;;;OAGG;IACH,OAAO,CAAC,EAAU;QAChB,OAAO,IAAI;aACR,KAAK;aACL,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC;IACpC,CAAC;IAED;;;OAGG;IACH,YAAY,CAAC,EAAU;QACrB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,EAAU,EAAE,IAAe;QACrC,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;YAC7B,IAAI,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE;gBAClB,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;oBACtB,OAAO,IAAI,CAAC;iBACb;gBACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBAEjB,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AAnFY,eAAe;IAD3B,gBAAO,EAAE;GACG,eAAe,CAmF3B;AAnFY,0CAAe","file":"UsersController.js","sourcesContent":["import {EUserRole, IUser} from '~/shared/types';\r\nimport {Service} from 'typedi';\r\n\r\ninterface IRegisterOptions {\r\n  firstName: string;\r\n  lastName?: string;\r\n  login: string;\r\n  password: string;\r\n}\r\n\r\n@Service()\r\nexport class UsersController {\r\n  private users: IUser[] = [{\r\n    id: 0,\r\n    firstName: 'admin',\r\n    login: 'admin',\r\n    password: 'admin',\r\n    role: EUserRole.Admin,\r\n  }];\r\n\r\n  /**\r\n   * Register new user.\r\n   * @param options\r\n   */\r\n  register(options: IRegisterOptions): IUser {\r\n    const {firstName, lastName, login, password} = options;\r\n    const loweredLogin = login.toLowerCase();\r\n    const isRegistered = this.users.some(u => {\r\n      return u.login.toLowerCase() === loweredLogin;\r\n    });\r\n\r\n    if (isRegistered) {\r\n      throw new Error('User is already registered');\r\n    }\r\n\r\n    this.users.push({\r\n      id: this.users.length,\r\n      firstName,\r\n      lastName,\r\n      login,\r\n      password,\r\n      role: EUserRole.Common,\r\n    });\r\n\r\n    return this.users[this.users.length - 1];\r\n  }\r\n\r\n  /**\r\n   * Returns user by login and password.\r\n   * @param login\r\n   * @param password\r\n   */\r\n  getByLoginAndPassword(login: string, password: string): IUser | null {\r\n    return this\r\n      .users\r\n      .find(u => u.login === login && u.password === password) || null;\r\n  }\r\n\r\n  /**\r\n   * Returns user by id.\r\n   * @param id\r\n   */\r\n  getById(id: number): IUser | null {\r\n    return this\r\n      .users\r\n      .find(u => u.id === id) || null;\r\n  }\r\n\r\n  /**\r\n   * Checks if user is registered.\r\n   * @param id\r\n   */\r\n  isRegistered(id: number): boolean {\r\n    return this.users.some(u => u.id === id);\r\n  }\r\n\r\n  /**\r\n   * Updates user role.\r\n   * @param id\r\n   * @param role\r\n   */\r\n  setUserRole(id: number, role: EUserRole): IUser | null {\r\n    for (const user of this.users) {\r\n      if (user.id === id) {\r\n        if (user.role === role) {\r\n          return user;\r\n        }\r\n        user.role = role;\r\n\r\n        return user;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}"],"sourceRoot":"/"}