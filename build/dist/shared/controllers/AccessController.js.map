{"version":3,"sources":["dist/shared/controllers/AccessController.ts"],"names":[],"mappings":";;;;;;;;;AAAA,0CAA4C;AAC5C,mCAA+B;AAC/B,0CAA6C;AAG7C,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAC3B;;;;OAIG;IACH,eAAe,CAAC,EAAU,EAAE,MAAsB;QAChD,OAAO,qBAAa,CAAC,EAAC,EAAE,EAAE,MAAM,EAAC,CAAC,CAAC;IACrC,CAAC;IAED;;;OAGG;IACH,sBAAsB,CAAC,EAAU;QAC/B,OAAO,IAAI,CAAC,eAAe,CAAC,EAAE,EAAE,CAAC,oBAAY,CAAC,YAAY,CAAC,CAAC,CAAC;IAC/D,CAAC;CACF,CAAA;AAjBY,gBAAgB;IAD5B,gBAAO,EAAE;GACG,gBAAgB,CAiB5B;AAjBY,4CAAgB","file":"AccessController.js","sourcesContent":["import {EAccessScope} from '~/shared/types';\r\nimport {Service} from 'typedi';\r\nimport {createUserJWT} from '~/shared/utils';\r\n\r\n@Service()\r\nexport class AccessController {\r\n  /**\r\n   * Creates user jwt.\r\n   * @param id\r\n   * @param scopes\r\n   */\r\n  createUserToken(id: number, scopes: EAccessScope[]): string {\r\n    return createUserJWT({id, scopes});\r\n  }\r\n\r\n  /**\r\n   * Creates default user token.\r\n   * @param id\r\n   */\r\n  createDefaultUserToken(id: number): string {\r\n    return this.createUserToken(id, [EAccessScope.ReadUserInfo]);\r\n  }\r\n}"],"sourceRoot":"/"}