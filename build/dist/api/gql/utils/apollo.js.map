{"version":3,"sources":["dist/api/gql/utils/apollo.ts"],"names":[],"mappings":"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","file":"apollo.js","sourcesContent":["import {buildSchemaSync, BuildSchemaOptions} from 'type-graphql';\r\nimport {ApolloServer, ExpressContext} from 'apollo-server-express';\r\nimport {SentryMiddleware} from '~/api/gql/middlewares';\r\nimport {Container} from 'typedi';\r\nimport {ContextFunction} from 'apollo-server-core';\r\nimport {decodeUserJWT, isString, isUndefined} from '~/shared/utils';\r\nimport {PubSub} from '~/shared/services';\r\nimport {ConfigToken} from '~/shared/di';\r\nimport {\r\n  getAdminResolvers,\r\n  getPublicResolvers,\r\n  getSharedResolvers\r\n} from '~/api/gql/structures';\r\nimport {GraphQLError, GraphQLFormattedError} from 'graphql';\r\nimport {EApolloErrors, IAuthorizedContext, IContext} from '~/api/gql/types';\r\n\r\n/**\r\n * Formats error occurred in resolver before sending it to client. Removes\r\n * some private fields.\r\n * @param error\r\n */\r\nfunction formatError(\r\n  error: GraphQLError\r\n): { name: string } & GraphQLFormattedError {\r\n  const {name, extensions, path, message} = error;\r\n\r\n  // Error thrown by Type GraphQL in Authorized decorator.\r\n  if (message.startsWith('Access denied!')) {\r\n    return {\r\n      name: EApolloErrors.Forbidden,\r\n      message,\r\n      path,\r\n    };\r\n  }\r\n  // Validation error thrown by class-validator.\r\n  else if (extensions?.exception && 'validationErrors' in extensions.exception) {\r\n    return {\r\n      name: EApolloErrors.Validation,\r\n      message,\r\n      path,\r\n      extensions: {\r\n        exception: extensions?.exception.validationErrors,\r\n      },\r\n    };\r\n  }\r\n    // Error thrown by Apollo GraphQL Server occurring when query sent by\r\n  // client is incorrect.\r\n  else if (name === 'ValidationError') {\r\n    return {\r\n      name: EApolloErrors.Schema,\r\n      message,\r\n      path,\r\n    };\r\n  }\r\n    // Error thrown in our code in some resolver. In case, error name is unknown,\r\n  // use \"UnknownError\".\r\n  else if (name === 'GraphQLError') {\r\n    return {\r\n      name: extensions?.exception?.name || EApolloErrors.Unknown,\r\n      message,\r\n      path,\r\n    };\r\n  }\r\n  // Unknown error.\r\n  return {name, path, message};\r\n}\r\n\r\n/**\r\n * Creates context in Apollo Server.\r\n * @param {ExpressContext} options\r\n * @returns {any}\r\n */\r\nconst context: ContextFunction<ExpressContext, IContext | IAuthorizedContext> =\r\n  options => {\r\n    const {req, connection} = options;\r\n    let context: IContext | IAuthorizedContext;\r\n\r\n    // In case, connection is undefined, it means, context is being created in\r\n    // usual HTTP resolver.\r\n    if (isUndefined(connection)) {\r\n      context = {\r\n        token: (req.header('authorization') || '').split(' ')[1] || null,\r\n      };\r\n    } else {\r\n      // Otherwise, we are in websocket context. Context was created previously in\r\n      // \"onConnect\" method.\r\n      context = connection.context;\r\n    }\r\n    const {token} = context;\r\n\r\n    if (token !== null) {\r\n      const payload = decodeUserJWT(token);\r\n\r\n      if (payload !== null) {\r\n        return {...context, user: payload};\r\n      }\r\n    }\r\n    return context;\r\n  };\r\n\r\n/**\r\n * Function which is called while web socket connection to server is being\r\n * created. As a result, it should return context value.\r\n * @param {Record<any, any>} connectionParams\r\n * @returns {IContext}\r\n */\r\nfunction onConnect(connectionParams: Record<any, any>): IContext {\r\n  return {\r\n    token: (connectionParams['authorization'] || '').split(' ')[1] || null\r\n  };\r\n}\r\n\r\n/**\r\n * Creates apollo server with specified options.\r\n * @returns {ApolloServer}\r\n * @param schemaOptions\r\n */\r\nfunction createServer(\r\n  schemaOptions: BuildSchemaOptions & { subscriptionsPath?: string },\r\n): ApolloServer {\r\n  const {\r\n    globalMiddlewares = [SentryMiddleware],\r\n    container = Container,\r\n    subscriptionsPath,\r\n    ...restSchemaOptions\r\n  } = schemaOptions;\r\n  const schema = buildSchemaSync({\r\n    ...restSchemaOptions,\r\n    globalMiddlewares,\r\n    container,\r\n    pubSub: subscriptionsPath ? Container.get(PubSub) : undefined,\r\n  });\r\n  const isNotLocal = Container.get(ConfigToken).appEnv !== 'local';\r\n\r\n  return new ApolloServer({\r\n    context,\r\n    schema,\r\n    subscriptions: isString(subscriptionsPath) ? {\r\n      path: subscriptionsPath,\r\n      onConnect,\r\n    } : false,\r\n    formatError,\r\n    // We block introspection query and playground on staging and production\r\n    // environments for security reasons.\r\n    introspection: !isNotLocal,\r\n    playground: !isNotLocal,\r\n  });\r\n}\r\n\r\n/**\r\n * Creates Apollo Server for specified access scope.\r\n * @param type\r\n */\r\nexport function createApolloServer(\r\n  type: 'public' | 'admin'\r\n): ApolloServer {\r\n  const config = Container.get(ConfigToken);\r\n  const getResolvers = type === 'public'\r\n    ? getPublicResolvers : getAdminResolvers;\r\n  const wsPath = type === 'public'\r\n    ? config.gqlPublicWSEndpoint : config.gqlAdminWSEndpoint;\r\n\r\n  return createServer({\r\n    resolvers: [...getSharedResolvers(), ...getResolvers()],\r\n    subscriptionsPath: wsPath || undefined,\r\n  });\r\n}"],"sourceRoot":"/"}