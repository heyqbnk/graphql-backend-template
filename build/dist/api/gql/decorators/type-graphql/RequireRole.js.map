{"version":3,"sources":["dist/api/gql/decorators/type-graphql/RequireRole.ts"],"names":[],"mappings":";;;AAAA,+CAAmD;AAGnD,6CAG0B;AAC1B,0CAAwC;AACxC,mCAAiC;AACjC,sDAAqD;AAErD;;;;GAIG;AACH,SAAgB,WAAW,CAAC,IAAsC;IAChE,OAAO,oCAAqB,CAAc,KAAK,EAAE,EAAC,OAAO,EAAC,EAAE,IAAI,EAAE,EAAE;QAClE,IAAI,CAAC,CAAC,MAAM,IAAI,OAAO,CAAC,EAAE;YACxB,MAAM,IAAI,2BAAkB,EAAE,CAAC;SAChC;QACD,MAAM,eAAe,GAAG,kBAAS,CAAC,GAAG,CAAC,6BAAe,CAAC,CAAC;QACvD,MAAM,IAAI,GAAG,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEtD,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,0BAAiB,EAAE,CAAC;SAC/B;QACD,IAAI,OAAO,GAAG,KAAK,CAAC;QAEpB,IAAI,gBAAQ,CAAC,IAAI,CAAC,EAAE;YAClB,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;gBAC1B,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,EAAE;oBACnB,OAAO,GAAG,IAAI,CAAC;oBACf,MAAM;iBACP;aACF;SACF;aAAM;YACL,OAAO,GAAG,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC;SAC9B;QAED,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,uBAAc,EAAE,CAAC;SAC5B;QACD,MAAM,IAAI,EAAE,CAAC;IACf,CAAC,CAAC,CAAC;AACL,CAAC;AA7BD,kCA6BC","file":"RequireRole.js","sourcesContent":["import {createMethodDecorator} from 'type-graphql';\r\nimport {EUserRole} from '~/shared/types';\r\nimport {TAnyContext} from '~/api/gql/types';\r\nimport {\r\n  AuthorizationError,\r\n  UserNotFoundError, ForbiddenError\r\n} from '~/api/gql/errors';\r\nimport {isObject} from '~/shared/utils';\r\nimport {Container} from 'typedi';\r\nimport {UsersController} from '~/shared/controllers';\r\n\r\n/**\r\n * Checks if current client has all required roles.\r\n * @constructor\r\n * @param role\r\n */\r\nexport function RequireRole(role: EUserRole | {oneOf: EUserRole[]}) {\r\n  return createMethodDecorator<TAnyContext>(async ({context}, next) => {\r\n    if (!('user' in context)) {\r\n      throw new AuthorizationError();\r\n    }\r\n    const usersController = Container.get(UsersController);\r\n    const user = usersController.getById(context.user.id);\r\n\r\n    if (!user) {\r\n      throw new UserNotFoundError();\r\n    }\r\n    let hasRole = false;\r\n\r\n    if (isObject(role)) {\r\n      for (const r of role.oneOf) {\r\n        if (user.role === r) {\r\n          hasRole = true;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      hasRole = user.role === role;\r\n    }\r\n\r\n    if (!hasRole) {\r\n      throw new ForbiddenError();\r\n    }\r\n    await next();\r\n  });\r\n}"],"sourceRoot":"/"}