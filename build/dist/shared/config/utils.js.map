{"version":3,"sources":["dist/shared/config/utils.ts"],"names":[],"mappings":";;;AACA,0CAAgE;AAmBhE;;;;GAIG;AACH,SAAgB,WAAW,CAAC,OAAe;IACzC,OAAO,IAAI,KAAK,CACd,wBAAwB,OAAO,yCAAyC,CACzE,CAAC;AACJ,CAAC;AAJD,kCAIC;AAED;;;;;GAKG;AACH,SAAgB,SAAS,CACvB,YAAoB,EACpB,UAA6B,EAAE;IAE/B,MAAM,EAAC,YAAY,EAAE,IAAI,EAAC,GAAG,OAAO,CAAC;IACrC,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;IAEhD,IACE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;QACnB,CAAC,IAAI,KAAK,UAAU,IAAI,KAAK,IAAI,CAAC,CAAC;QACnC,CAAC,IAAI,KAAK,UAAU,IAAI,KAAK,IAAI,CAAC,CAAC,EACnC;QACA,IAAI,mBAAW,CAAC,YAAY,CAAC,EAAE;YAC7B,MAAM,WAAW,CAAC,YAAY,CAAC,CAAC;SACjC;QACD,OAAO,YAAY,CAAC;KACrB;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAlBD,8BAkBC;AAED;;;;;GAKG;AACH,SAAgB,SAAS,CACvB,YAAoB,EACpB,UAA6B,EAAE;IAE/B,MAAM,EAAC,YAAY,EAAC,GAAG,OAAO,CAAC;IAC/B,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAExC,IAAI,gBAAQ,CAAC,KAAK,CAAC,EAAE;QACnB,OAAO,KAAK,CAAC;KACd;IACD,IAAI,gBAAQ,CAAC,YAAY,CAAC,EAAE;QAC1B,OAAO,YAAY,CAAC;KACrB;IACD,MAAM,WAAW,CAAC,YAAY,CAAC,CAAC;AAClC,CAAC;AAdD,8BAcC;AAED;;;;GAIG;AACH,SAAgB,UAAU,CACxB,YAAoB,EACpB,UAA8B,EAAE;IAEhC,MAAM,EAAC,YAAY,EAAC,GAAG,OAAO,CAAC;IAC/B,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAExC,IAAI,gBAAQ,CAAC,KAAK,CAAC,EAAE;QACnB,OAAO,KAAK,KAAK,GAAG,CAAC;KACtB;IACD,IAAI,iBAAS,CAAC,YAAY,CAAC,EAAE;QAC3B,OAAO,YAAY,CAAC;KACrB;IACD,MAAM,WAAW,CAAC,YAAY,CAAC,CAAC;AAClC,CAAC;AAdD,gCAcC;AAED;;;;;GAKG;AACH,SAAgB,iBAAiB,CAC/B,YAAoB,EACpB,UAAqC,EAAE;IAEvC,MAAM,EAAC,YAAY,EAAC,GAAG,OAAO,CAAC;IAC/B,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAExC,IAAI,gBAAQ,CAAC,KAAK,CAAC,EAAE;QACnB,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YACtD,OAAO,KAAwB,CAAC;SACjC;QACD,MAAM,WAAW,CAAC,YAAY,CAAC,CAAC;KACjC;IACD,IAAI,gBAAQ,CAAC,YAAY,CAAC,EAAE;QAC1B,OAAO,YAAY,CAAC;KACrB;IACD,MAAM,WAAW,CAAC,YAAY,CAAC,CAAC;AAClC,CAAC;AAjBD,8CAiBC","file":"utils.js","sourcesContent":["import {TAppEnvironment} from '~/shared/types';\r\nimport {isBoolean, isString, isUndefined} from '~/shared/utils';\r\n\r\ninterface IGetStringOptions {\r\n  defaultValue?: string;\r\n}\r\n\r\ninterface IGetNumberOptions {\r\n  defaultValue?: number;\r\n  type?: 'negative' | 'positive';\r\n}\r\n\r\ninterface IGetBooleanOptions {\r\n  defaultValue?: boolean;\r\n}\r\n\r\ninterface IGetAppEnvironmentOptions {\r\n  defaultValue?: TAppEnvironment;\r\n}\r\n\r\n/**\r\n * Creates error for specified environment variable.\r\n * @param {string} envName\r\n * @returns {Error}\r\n */\r\nexport function createError(envName: string) {\r\n  return new Error(\r\n    `Environment variable ${envName} was not passed or has incorrect format`,\r\n  );\r\n}\r\n\r\n/**\r\n * Parses variable as number.\r\n * @param {string} variableName\r\n * @param {IGetNumberOptions} options\r\n * @returns {number}\r\n */\r\nexport function getNumber(\r\n  variableName: string,\r\n  options: IGetNumberOptions = {},\r\n): number {\r\n  const {defaultValue, type} = options;\r\n  const value = Number(process.env[variableName]);\r\n\r\n  if (\r\n    Number.isNaN(value) ||\r\n    (type === 'negative' && value >= 0) ||\r\n    (type === 'positive' && value <= 0)\r\n  ) {\r\n    if (isUndefined(defaultValue)) {\r\n      throw createError(variableName);\r\n    }\r\n    return defaultValue;\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Parses variable as string.\r\n * @param {string} variableName\r\n * @param {IGetStringOptions} options\r\n * @returns {string}\r\n */\r\nexport function getString(\r\n  variableName: string,\r\n  options: IGetStringOptions = {},\r\n): string {\r\n  const {defaultValue} = options;\r\n  const value = process.env[variableName];\r\n\r\n  if (isString(value)) {\r\n    return value;\r\n  }\r\n  if (isString(defaultValue)) {\r\n    return defaultValue;\r\n  }\r\n  throw createError(variableName);\r\n}\r\n\r\n/**\r\n * Parses variable as boolean.\r\n * @param variableName\r\n * @param options\r\n */\r\nexport function getBoolean(\r\n  variableName: string,\r\n  options: IGetBooleanOptions = {},\r\n): boolean {\r\n  const {defaultValue} = options;\r\n  const value = process.env[variableName];\r\n\r\n  if (isString(value)) {\r\n    return value === '1';\r\n  }\r\n  if (isBoolean(defaultValue)) {\r\n    return defaultValue;\r\n  }\r\n  throw createError(variableName);\r\n}\r\n\r\n/**\r\n * Parses variable as application environment.\r\n * @param {string} variableName\r\n * @param {IGetAppEnvironmentOptions} options\r\n * @returns {TAppEnvironment}\r\n */\r\nexport function getAppEnvironment(\r\n  variableName: string,\r\n  options: IGetAppEnvironmentOptions = {},\r\n): TAppEnvironment {\r\n  const {defaultValue} = options;\r\n  const value = process.env[variableName];\r\n\r\n  if (isString(value)) {\r\n    if (['local', 'staging', 'production'].includes(value)) {\r\n      return value as TAppEnvironment;\r\n    }\r\n    throw createError(variableName);\r\n  }\r\n  if (isString(defaultValue)) {\r\n    return defaultValue;\r\n  }\r\n  throw createError(variableName);\r\n}\r\n"],"sourceRoot":"/"}