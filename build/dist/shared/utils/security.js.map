{"version":3,"sources":["dist/shared/utils/security.ts"],"names":[],"mappings":";;;;;;AAAA,gEAA+B;AAC/B,mCAAiC;AACjC,oCAAwC;AACxC,0CAMwB;AACxB,0CAA6D;AAE7D,MAAM,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AAC9B,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,oBAAY,CAAC,CAAC;AAE3C;;;GAGG;AACH,SAAS,SAAS,CAAC,OAAe;IAChC,gDAAgD;IAChD,OAAO,sBAAG,CAAC,IAAI,CACb,OAAO,EACP,kBAAS,CAAC,GAAG,CAAC,gBAAW,CAAC,CAAC,YAAY,EACvC,EAAC,SAAS,EAAE,QAAQ,EAAC,CACtB,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,SAAgB,aAAa,CAAC,OAAwB;IACpD,OAAO,SAAS,CAAC,OAAO,CAAC,CAAC;AAC5B,CAAC;AAFD,sCAEC;AAED;;;;GAIG;AACH,SAAS,SAAS,CAAC,KAAa;IAC9B,IAAI;QACF,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,kBAAS,CAAC,GAAG,CAAC,gBAAW,CAAC,CAAC,YAAY,CAAC,CAAC;QAE3E,IAAI,CAAC,gBAAQ,CAAC,OAAO,CAAC,EAAE;YACtB,OAAO,IAAI,CAAC;SACb;QACD,OAAO,OAAO,CAAC;KAChB;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAED;;;GAGG;AACH,SAAS,gBAAgB,CAAC,KAAU;IAClC,OAAO,gBAAQ,CAAC,KAAK,CAAC;QACpB,KAAK;QACL,gBAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;QAClB,SAAS;QACT,CAAC,eAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YAC/C,OAAO,gBAAQ,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAiB,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC,CAAC;AACR,CAAC;AAED;;;GAGG;AACH,SAAgB,aAAa,CAAC,KAAa;IACzC,MAAM,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IAEjC,IAAI,OAAO,KAAK,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE;QAClD,OAAO,IAAI,CAAC;KACb;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAPD,sCAOC","file":"security.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport {Container} from 'typedi';\r\nimport {ConfigToken} from '~/shared/di';\r\nimport {\r\n  isArray,\r\n  isBoolean,\r\n  isNumber,\r\n  isObject, isString,\r\n  isUndefined\r\n} from '~/shared/utils';\r\nimport {EAccessScope, IUserJWTPayload} from '~/shared/types';\r\n\r\nconst DAY_IN_S = 24 * 60 * 60;\r\nconst scopes = Object.values(EAccessScope);\r\n\r\n/**\r\n * Creates JSON Web Token.\r\n * @param payload\r\n */\r\nfunction createJWT(payload: object): string {\r\n  // Create JSON Web Token with duration of 1 day.\r\n  return jwt.sign(\r\n    payload,\r\n    Container.get(ConfigToken).jwtSecretKey,\r\n    {expiresIn: DAY_IN_S}\r\n  );\r\n}\r\n\r\n/**\r\n * Creates user JWT.\r\n * @param payload\r\n */\r\nexport function createUserJWT(payload: IUserJWTPayload): string {\r\n  return createJWT(payload);\r\n}\r\n\r\n/**\r\n * Validates JSON Web Token returning payload or false in case token is not\r\n * valid.\r\n * @param token\r\n */\r\nfunction decodeJWT(token: string): Record<string, unknown> | null {\r\n  try {\r\n    const payload = jwt.verify(token, Container.get(ConfigToken).jwtSecretKey);\r\n\r\n    if (!isObject(payload)) {\r\n      return null;\r\n    }\r\n    return payload;\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if value is user JWT payload.\r\n * @param value\r\n */\r\nfunction isUserJWTPayload(value: any): value is IUserJWTPayload {\r\n  return isObject(value) &&\r\n    // id\r\n    isNumber(value.id) &&\r\n    // scopes\r\n    (isArray(value.scopes) && value.scopes.every(s => {\r\n      return isString(s) && scopes.includes(s as EAccessScope);\r\n    }));\r\n}\r\n\r\n/**\r\n * Decodes token and returns payload in case it is user JWT payload.\r\n * @param token\r\n */\r\nexport function decodeUserJWT(token: string): IUserJWTPayload | null {\r\n  const payload = decodeJWT(token);\r\n\r\n  if (payload === null || !isUserJWTPayload(payload)) {\r\n    return null;\r\n  }\r\n  return payload;\r\n}"],"sourceRoot":"/"}