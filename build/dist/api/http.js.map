{"version":3,"sources":["dist/api/http.ts"],"names":[],"mappings":";;;;;;AAAA,+BAA0C;AAC1C,sDAAqD;AACrD,gDAAwB;AACxB,mCAAiC;AACjC,oCAAwC;AACxC,mCAA6C;AAC7C,2CAA8C;AAE9C,gDAAyC;AACzC,0CAAwC;AAExC;;;;GAIG;AACH,SAAS,mBAAmB,CAAC,MAAoB;IAC/C,sEAAsE;IACtE,2EAA2E;IAC3E,OAAO;IACP,OAAO,MAAM,CAAC,aAAa,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC,CAAC;AACxD,CAAC;AAED;;;;GAIG;AACH,SAAS,2BAA2B,CAClC,YAA0B,EAC1B,UAAkB;IAElB,IAAI,gBAAQ,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE;QAC5C,YAAY,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC;KACtD;AACH,CAAC;AAED;;;GAGG;AACH,SAAgB,eAAe;IAC7B,MAAM,EACJ,IAAI,EAAE,oBAAoB,EAAE,qBAAqB,EAAE,UAAU,GAC9D,GAAG,kBAAS,CAAC,GAAG,CAAC,gBAAW,CAAC,CAAC;IAC/B,MAAM,MAAM,GAAG,kBAAS,CAAC,GAAG,CAAC,iBAAM,CAAC,CAAC;IACrC,MAAM,GAAG,GAAG,iBAAO,EAAE,CAAC;IACtB,MAAM,UAAU,GAAG,mBAAY,CAAC,GAAG,CAAC,CAAC;IAErC,8DAA8D;IAC9D,qBAAa,EAAE,CAAC;IAEhB,oDAAoD;IACpD,MAAM,SAAS,GAAG,wBAAkB,CAAC,OAAO,CAAC,CAAC;IAC9C,MAAM,YAAY,GAAG,wBAAkB,CAAC,QAAQ,CAAC,CAAC;IAElD,iCAAiC;IACjC,2BAA2B,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;IACtD,2BAA2B,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IAEnD,yEAAyE;IACzE,yEAAyE;IACzE,yEAAyE;IACzE,qEAAqE;IACrE,MAAM,YAAY,GAAwB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QAChE,IAAI,GAAG,CAAC,WAAW,EAAE;YACnB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;QACD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,sBAAsB,EAAC,CAAC,CAAC;IAC1D,CAAC,CAAC;IACF,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IACxB,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,UAAU,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC;IAC/C,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACtB,GAAG,CAAC,GAAG,CAAC,oBAAoB,EAAE,mBAAmB,CAAC,SAAS,CAAC,CAAC,CAAC;IAC9D,GAAG,CAAC,GAAG,CAAC,qBAAqB,EAAE,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC;IAElE,yCAAyC;IACzC,IAAI,UAAU,EAAE;QACd,GAAG,CAAC,GAAG,CAAC,cAAI,EAAE,CAAC,CAAC;KACjB;IAED,6EAA6E;IAC7E,OAAO,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;QAClC,MAAM,CAAC,GAAG,CAAC,4BAA4B,IAAI,GAAG,qBAAqB,EAAE,CAAC,CAAC;QACvE,MAAM,CAAC,GAAG,CAAC,2BAA2B,IAAI,GAAG,oBAAoB,EAAE,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;AACL,CAAC;AA7CD,0CA6CC","file":"http.js","sourcesContent":["import {createServer, Server} from 'http';\r\nimport express, {ErrorRequestHandler} from 'express';\r\nimport cors from 'cors';\r\nimport {Container} from 'typedi';\r\nimport {ConfigToken} from '~/shared/di';\r\nimport {createApolloServer} from '~/api/gql';\r\nimport {registerEnums} from '~/api/gql/utils';\r\nimport {ApolloServer} from 'apollo-server-express';\r\nimport {Logger} from '~/shared/services';\r\nimport {isString} from '~/shared/utils';\r\n\r\n/**\r\n * Returns correct middleware for Apollo server.\r\n * @param {ApolloServer} server\r\n * @returns {express.Router}\r\n */\r\nfunction getServerMiddleware(server: ApolloServer) {\r\n  // We disable CORS due to is should be controlled from upper layers of\r\n  // application. Path is set to \"/\" because it is controlled by upper layers\r\n  // too.\r\n  return server.getMiddleware({path: '/', cors: false});\r\n}\r\n\r\n/**\r\n * Installs subscription handlers for apollo server in case, it is required.\r\n * @param {ApolloServer} apolloServer\r\n * @param {Server} httpServer\r\n */\r\nfunction installSubscriptionHandlers(\r\n  apolloServer: ApolloServer,\r\n  httpServer: Server\r\n) {\r\n  if (isString(apolloServer.subscriptionsPath)) {\r\n    apolloServer.installSubscriptionHandlers(httpServer);\r\n  }\r\n}\r\n\r\n/**\r\n * Starts HTTP-server.\r\n * @returns {void}\r\n */\r\nexport function startHttpServer() {\r\n  const {\r\n    port, gqlAdminHttpEndpoint, gqlPublicHttpEndpoint, enableCors,\r\n  } = Container.get(ConfigToken);\r\n  const logger = Container.get(Logger);\r\n  const app = express();\r\n  const httpServer = createServer(app);\r\n\r\n  // Before creating Apollo servers, register all GraphQL enums.\r\n  registerEnums();\r\n\r\n  // Then, create servers for public and admin routes.\r\n  const admServer = createApolloServer('admin');\r\n  const publicServer = createApolloServer('public');\r\n\r\n  // Install subscription handlers.\r\n  installSubscriptionHandlers(publicServer, httpServer);\r\n  installSubscriptionHandlers(admServer, httpServer);\r\n\r\n  // Define fatal error catcher. It will catch errors occurring when client\r\n  // sends incorrect body or something like that. For example, client could\r\n  // send us header which states, his body is JSON, but it can be corrupted\r\n  // and Express will throw error, which will not be handler correctly.\r\n  const errorHandler: ErrorRequestHandler = (err, req, res, next) => {\r\n    if (res.headersSent) {\r\n      return next(err);\r\n    }\r\n    res.status(500).json({message: 'Something went wrong'});\r\n  };\r\n  app.use(express.json());\r\n  app.use(express.urlencoded({extended: false}));\r\n  app.use(errorHandler);\r\n  app.use(gqlAdminHttpEndpoint, getServerMiddleware(admServer));\r\n  app.use(gqlPublicHttpEndpoint, getServerMiddleware(publicServer));\r\n\r\n  // In case, CORS is required, apply them.\r\n  if (enableCors) {\r\n    app.use(cors());\r\n  }\r\n\r\n  // Open HTTP server port on specified port and log GraphQL servers endpoints.\r\n  return httpServer.listen(port, () => {\r\n    logger.log(`Public: http://localhost:${port}${gqlPublicHttpEndpoint}`);\r\n    logger.log(`Admin: http://localhost:${port}${gqlAdminHttpEndpoint}`);\r\n  });\r\n}\r\n"],"sourceRoot":"/"}