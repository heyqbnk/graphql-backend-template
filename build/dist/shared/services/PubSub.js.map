{"version":3,"sources":["dist/shared/services/PubSub.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iEAAyE;AACzE,qCAAoE;AACpE,0CAA+D;AAC/D,mCAA+B;AAS/B,SAAS,eAAe,CAAC,KAAU;IACjC,OAAO,gBAAQ,CAAC,KAAK,CAAC;QACpB,KAAK,CAAC,IAAI,KAAK,eAAe;QAC9B,gBAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;AAChC,CAAC;AAED;;GAEG;AACH,MAAa,cAAc;IACzB,IAAI;QACF,IAAI,CAAC,kBAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;SACvE;QACD,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,iBAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,mBAAW,CAAC,CAAC,CAAC,CAAa,CAAC;QAErF,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACvB,IAAI,CAAC,mBAAW,CAAC,CAAC,CAAC,EAAE;gBACnB,mEAAmE;gBACnE,uEAAuE;gBACvE,qBAAqB;gBACrB,CAAC,CAAC,EAAE,CAAC,SAAS,EAAE,KAAK,EAAC,OAAO,EAAC,EAAE;oBAC9B,IAAI,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;wBAC1D,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;qBAC5C;gBACH,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AApBD,wCAoBC;AAED;;GAEG;AAEH,IAAa,MAAM,GAAnB,MAAa,MAAO,SAAQ,8BAAS;IACnC,YAAY,KAAqB;QAC/B,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,2EAA2E;QAC3E,IAAI,kBAAQ,EAAE;YACZ,gBAAM,CAAC,EAAE,CAAC,SAAS,EAAE,KAAK,EAAC,OAAO,EAAC,EAAE;gBACnC,IAAI,eAAe,CAAC,OAAO,CAAC,EAAE;oBAC5B,MAAM,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;iBAC3D;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,KAAK,CAAC,OAAO,CACX,WAAc,EACd,OAAkC;QAElC,2EAA2E;QAC3E,yBAAyB;QACzB,IAAI,kBAAQ,EAAE;YACZ,iEAAiE;YACjE,MAAM,OAAO,GAAmB;gBAC9B,IAAI,EAAE,eAAe;gBACrB,WAAW;gBACX,OAAO;aACR,CAAC;YACF,gBAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACrB,OAAO;SACR;QACD,iCAAiC;QACjC,OAAO,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAC7C,CAAC;CACF,CAAA;AAjCY,MAAM;IADlB,gBAAO,EAAE;;GACG,MAAM,CAiClB;AAjCY,wBAAM","file":"PubSub.js","sourcesContent":["import {PubSub as GqlPubSub, PubSubOptions} from 'graphql-subscriptions';\r\nimport {worker, isWorker, isMaster, workers, Worker} from 'cluster';\r\nimport {isObject, isString, isUndefined} from '~/shared/utils';\r\nimport {Service} from 'typedi';\r\nimport {EPubSubEvent, TGetPubSubEventPayload} from '~/api/gql/types';\r\n\r\ninterface IPubSubMessage {\r\n  type: 'PubSubMessage';\r\n  triggerName: string;\r\n  payload?: any;\r\n}\r\n\r\nfunction isPubSubMessage(value: any): value is IPubSubMessage {\r\n  return isObject(value) &&\r\n    value.type === 'PubSubMessage' &&\r\n    isString(value.triggerName);\r\n}\r\n\r\n/**\r\n * Multi cluster provider for PubSub.\r\n */\r\nexport class PubSubProvider {\r\n  init() {\r\n    if (!isMaster) {\r\n      throw new Error('Unable to create PubSubProvider not in main thread');\r\n    }\r\n    const workersArray = Object.values(workers).filter(w => !isUndefined(w)) as Worker[];\r\n\r\n    workersArray.forEach(w => {\r\n      if (!isUndefined(w)) {\r\n        // Listen to each threads requests for events publication. In case,\r\n        // request was received, it is required to notify all the threads about\r\n        // they should do it.\r\n        w.on('message', async message => {\r\n          if (isPubSubMessage(message) && !isUndefined(process.send)) {\r\n            workersArray.forEach(w => w.send(message));\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Custom PubSub.\r\n */\r\n@Service()\r\nexport class PubSub extends GqlPubSub {\r\n  constructor(props?: PubSubOptions) {\r\n    super(props);\r\n\r\n    // Post event in case currently it is worker thread and event was received.\r\n    if (isWorker) {\r\n      worker.on('message', async message => {\r\n        if (isPubSubMessage(message)) {\r\n          await super.publish(message.triggerName, message.payload);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  async publish<E extends EPubSubEvent>(\r\n    triggerName: E,\r\n    payload: TGetPubSubEventPayload<E>,\r\n  ): Promise<void> {\r\n    // In case, we are in multi cluster mode, just notify all threads about it,\r\n    // so they publish event.\r\n    if (isWorker) {\r\n      // При публикации события не забываем уведомить остальные потоки.\r\n      const message: IPubSubMessage = {\r\n        type: 'PubSubMessage',\r\n        triggerName,\r\n        payload,\r\n      };\r\n      worker.send(message);\r\n      return;\r\n    }\r\n    // Otherwise, just publish event.\r\n    return super.publish(triggerName, payload);\r\n  }\r\n}"],"sourceRoot":"/"}