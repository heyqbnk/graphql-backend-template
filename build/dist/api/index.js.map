{"version":3,"sources":["dist/api/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4BAA0B;AAC1B,oCAA4D;AAC5D,gDAAyD;AACzD,0CAAiD;AACjD,mCAAiC;AACjC,qCAA2C;AAC3C,qCAAuC;AACvC,4CAAoB;AACpB,qDAAuC;AAEvC;;GAEG;AACH,SAAgB,gBAAgB;IAC9B,MAAM,MAAM,GAAG,kBAAS,CAAC,GAAG,CAAC,iBAAM,CAAC,CAAC;IACrC,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,kBAAS,CAAC,GAAG,CAAC,gBAAW,CAAC,CAAC,CAAC;IAElD,sBAAsB;IACtB,sBAAe,EAAE,CAAC;AACpB,CAAC;AAND,4CAMC;AAED;;GAEG;AACH,SAAgB,eAAe;IAC7B,IAAI,kBAAQ,EAAE;QACZ,MAAM,MAAM,GAAG,kBAAS,CAAC,GAAG,CAAC,iBAAM,CAAC,CAAC;QACrC,MAAM,MAAM,GAAG,kBAAS,CAAC,GAAG,CAAC,gBAAW,CAAC,CAAC;QAC1C,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAE9B,qDAAqD;QACrD,MAAM,QAAQ,GAAG,YAAE,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC;QAElC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;YACjC,cAAI,EAAE,CAAC;SACR;QAED,wEAAwE;QACxE,iCAAiC;QACjC,IAAI,yBAAc,EAAE,CAAC,IAAI,EAAE,CAAC;KAC7B;SAAM;QACL,sBAAe,EAAE,CAAC;KACnB;AACH,CAAC;AAnBD,0CAmBC;AAED;;;GAGG;AACH,SAAgB,IAAI;IAClB,IAAI,kBAAS,CAAC,GAAG,CAAC,gBAAW,CAAC,CAAC,iBAAiB,EAAE;QAChD,OAAO,eAAe,EAAE,CAAC;KAC1B;IACD,OAAO,gBAAgB,EAAE,CAAC;AAC5B,CAAC;AALD,oBAKC;AAED,6BAA6B;AAC7B,uBAAkB,EAAE;IAClB,oBAAoB;KACnB,IAAI,CAAC,IAAI,CAAC;IACX,qEAAqE;KACpE,KAAK,CAAC,CAAC,CAAC,EAAE;IACT,yBAAiB,CAAC,CAAC,CAAC,CAAC;IAErB,iDAAiD;IACjD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC","file":"index.js","sourcesContent":["import '~/shared/globals';\r\nimport {ConfigToken, injectDependencies} from '~/shared/di';\r\nimport {Logger, PubSubProvider} from '~/shared/services';\r\nimport {fatalErrorCatcher} from '~/shared/utils';\r\nimport {Container} from 'typedi';\r\nimport {startHttpServer} from '~/api/http';\r\nimport {fork, isMaster} from 'cluster';\r\nimport os from 'os';\r\nimport * as Sentry from '@sentry/node';\r\n\r\n/**\r\n * Initializes project in single thread mode.\r\n */\r\nexport function initSingleThread() {\r\n  const logger = Container.get(Logger);\r\n  logger.log('Config:', Container.get(ConfigToken));\r\n\r\n  // Launch HTTP-server.\r\n  startHttpServer();\r\n}\r\n\r\n/**\r\n * Initializes project in multi thread mode.\r\n */\r\nexport function initMultiThread() {\r\n  if (isMaster) {\r\n    const logger = Container.get(Logger);\r\n    const config = Container.get(ConfigToken);\r\n    logger.log('Config:', config);\r\n\r\n    // Create maximum count of workers processor support.\r\n    const cpuCount = os.cpus().length;\r\n\r\n    for (let i = 0; i < cpuCount; i++) {\r\n      fork();\r\n    }\r\n\r\n    // Dont forget to initialize PubSubProvider, so all the PubSub instances\r\n    // in slave threads could use it.\r\n    new PubSubProvider().init();\r\n  } else {\r\n    startHttpServer();\r\n  }\r\n}\r\n\r\n/**\r\n * Launches project.\r\n * @returns {Server}\r\n */\r\nexport function init() {\r\n  if (Container.get(ConfigToken).enableMultiThread) {\r\n    return initMultiThread();\r\n  }\r\n  return initSingleThread();\r\n}\r\n\r\n// Inject async dependencies.\r\ninjectDependencies()\r\n  // Initialize server\r\n  .then(init)\r\n  // In case, error occurs, catch it with sentry and exit from process.\r\n  .catch(e => {\r\n    fatalErrorCatcher(e);\r\n\r\n    // Shutdown Sentry and lill process in 2 seconds.\r\n    Sentry.close(2000).then(() => process.exit(1));\r\n  });"],"sourceRoot":"/"}