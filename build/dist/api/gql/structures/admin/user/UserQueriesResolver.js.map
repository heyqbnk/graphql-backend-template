{"version":3,"sources":["dist/api/gql/structures/admin/user/UserQueriesResolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,+CAMsB;AACtB,qDAA0C;AAC1C,0CAAyC;AACzC,qDAAiD;AACjD,sDAAqD;AACrD,mCAA8B;AAC9B,6CAAmD;AAGnD,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAS9B,IAAI,CAGC,MAAc;QAEjB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAE7C,IAAI,IAAI,KAAK,IAAI,EAAE;YACjB,MAAM,IAAI,0BAAiB,EAAE,CAAC;SAC/B;QACD,OAAO,IAAI,iBAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;CACF,CAAA;AAnBC;IADC,eAAM,CAAC,GAAG,EAAE,CAAC,6BAAe,CAAC;8BAClB,6BAAe;uDAAC;AAO5B;IALC,wBAAW,CAAC,EAAC,KAAK,EAAE,CAAC,iBAAS,CAAC,SAAS,EAAE,iBAAS,CAAC,KAAK,CAAC,EAAC,CAAC;IAC5D,oBAAK,CAAC,GAAG,EAAE,CAAC,iBAAI,EAAE;QACjB,WAAW,EAAE,oBAAoB;QACjC,QAAQ,EAAE,IAAI;KACf,CAAC;IAEC,WAAA,kBAAG,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,kBAAG,EAAE;QACxB,WAAW,EAAE,iBAAiB;KAC/B,CAAC,CAAA;;;;+CAQH;AApBU,mBAAmB;IAD/B,uBAAQ,EAAE;GACE,mBAAmB,CAqB/B;AArBY,kDAAmB","file":"UserQueriesResolver.js","sourcesContent":["import {\r\n  Arg,\r\n  Int,\r\n  Maybe,\r\n  Query,\r\n  Resolver\r\n} from 'type-graphql';\r\nimport {User} from '~/api/gql/structures';\r\nimport {EUserRole} from '~/shared/types';\r\nimport {RequireRole} from '~/api/gql/decorators';\r\nimport {UsersController} from '~/shared/controllers';\r\nimport {Inject} from 'typedi';\r\nimport {UserNotFoundError} from '~/api/gql/errors';\r\n\r\n@Resolver()\r\nexport class UserQueriesResolver {\r\n  @Inject(() => UsersController)\r\n  controller: UsersController;\r\n\r\n  @RequireRole({oneOf: [EUserRole.Moderator, EUserRole.Admin]})\r\n  @Query(() => User, {\r\n    description: 'Returns user by id',\r\n    nullable: true,\r\n  })\r\n  user(\r\n    @Arg('userId', () => Int, {\r\n      description: 'User identifier'\r\n    }) userId: number,\r\n  ): Maybe<User> {\r\n    const user = this.controller.getById(userId);\r\n\r\n    if (user === null) {\r\n      throw new UserNotFoundError();\r\n    }\r\n    return new User(user);\r\n  }\r\n}"],"sourceRoot":"/"}